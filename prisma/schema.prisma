// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    password  String?
    googleId  String?  @unique
    image     String?
    emailVerified DateTime?
    posts     Posts[]
    comments  Comments[]
    accounts  Account?
    sessions  Session?
    profile   Profiles?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}



// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            Int     @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int      @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Category {
  UKM
  AMIKOM
  Berita
  Saran
}



model Profiles {
  id          Int      @id @default(autoincrement())
  student_id  Int      @unique
  student     User @relation(fields: [student_id], references: [id])
  nim         String?  
}

model Posts {
  id          Int      @id @default(autoincrement())
  body        String
  image       String?
  student_id  Int
  student     User @relation(fields: [student_id], references: [id])
  comments    Comments[]
  category    Category @default(AMIKOM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Comments {
  id          Int      @id @default(autoincrement())
  body        String
  student_id  Int       
  student     User @relation(fields: [student_id], references: [id])
  post_id     Int
  post        Posts    @relation(fields: [post_id], references: [id])
  createdAt   DateTime @default(now())
}